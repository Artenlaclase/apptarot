---
// src/pages/cards/index.astro
import { db } from '../../lib/firebase';
import { collection, getDocs, query, orderBy } from 'firebase/firestore';
import Layout from '../../layouts/Layout.astro';

interface FirestoreCard {
  id: string;
  nombre?: string;
  numero?: string | number;
  imagem?: string | null;
  imagen?: string | null; // Campo alternativo por si acaso
}

const q = query(collection(db, 'cards'), orderBy('numero'));
const querySnapshot = await getDocs(q);

const processImageUrl = (url: string | undefined | null): string => {
  // 1. Verificación básica
  if (!url || typeof url !== 'string') return '/placeholder-card.jpg';
  
  // 2. Limpieza de URL (elimina espacios en blanco)
  const cleanedUrl = url.trim();
  
  // 3. Manejo de Firebase Storage
  if (cleanedUrl.startsWith('https://firebasestorage.googleapis.com')) {
    // Asegura el parámetro alt=media
    return cleanedUrl.includes('alt=media') 
      ? cleanedUrl 
      : `${cleanedUrl}${cleanedUrl.includes('?') ? '&' : '?'}alt=media`;
  }
  
  // 4. Manejo de Cloudinary (si aplica)
  if (cleanedUrl.includes('res.cloudinary.com') && !cleanedUrl.includes('upload/w_')) {
    return cleanedUrl.replace('upload/', 'upload/w_300,f_auto,q_auto/');
  }
  
  return cleanedUrl;
};

const cards = querySnapshot.docs.map(doc => {
  const data = doc.data();
  const imageUrl = data.imagem || data.imagen; // Usa cualquier campo que exista
  
  return {
    id: doc.id,
    nombre: data.nombre || 'Sin nombre',
    numero: data.numero ?? 'N/A', // Usamos operador nullish coalescing
    imagem: processImageUrl(imageUrl)
  };
});

const pageTitle = "Mazo Completo de Tarot de Marsella";
const pageDescription = "Explora todas las cartas del Tarot de Marsella y sus significados";
---

<Layout title={pageTitle} description={pageDescription}>
  <main class="container mx-auto px-4 py-8 max-w-7xl">
    <header class="text-center mb-12">
      <h1 class="text-4xl font-bold text-purple-900 mb-2">{pageTitle}</h1>
      <p class="text-xl text-purple-700">Descubre los arcanos mayores y menores</p>
    </header>

    <!-- Grid responsivo optimizado para cartas completas -->
    <section class="cartas-grid-custom">
      {cards.map(card => (
        <a 
          href={`/cards/${card.id}`} 
          class="carta-link"
        >
          <article class="carta-item">
            <div class="carta-image-container">
              <img
                src={card.imagem}
                alt={`Carta ${card.nombre}`}
                loading="lazy"
                decoding="async"
                class="carta-image"
                onerror="this.src='/placeholder-card.jpg';this.classList.add('error-image')"
              />
            </div>
            <div class="carta-info">
              <h3 class="carta-nombre">{card.nombre}</h3>
              <span class="carta-numero">({card.numero})</span>
            </div>
          </article>
        </a>
      ))}
    </section>
  </main>
</Layout>

<style>
  /* Grid personalizado para cartas */
  .cartas-grid-custom {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 2rem;
    padding: 1rem 0;
    justify-items: center;
  }

  /* Enlaces de carta */
  .carta-link {
    display: block;
    text-decoration: none;
    color: inherit;
    transition: all 0.3s ease;
    width: 100%;
    max-width: 250px;
  }

  .carta-link:hover {
    transform: translateY(-8px);
  }

  /* Contenedor de cada carta */
  .carta-item {
    display: flex;
    flex-direction: column;
    height: 100%;
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }

  .carta-link:hover .carta-item {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.15);
  }

  /* Contenedor de imagen optimizado */
  .carta-image-container {
    width: 100%;
    position: relative;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 300px;
    overflow: hidden;
  }

  /* Imagen de carta - SE VE COMPLETA */
  .carta-image {
    width: 100%;
    height: auto;
    max-height: 400px;
    object-fit: contain; /* CLAVE: contain en lugar de cover */
    object-position: center;
    transition: transform 0.3s ease;
  }

  .carta-link:hover .carta-image {
    transform: scale(1.02);
  }

  /* Información de la carta */
  .carta-info {
    padding: 1rem;
    text-align: center;
    background: white;
  }

  .carta-nombre {
    font-size: 1.1rem;
    font-weight: 600;
    color: #374151;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
  }

  .carta-numero {
    font-size: 0.9rem;
    color: #6b7280;
    font-weight: 400;
  }

  /* Imagen de error */
  .error-image {
    background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .cartas-grid-custom {
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
      gap: 1.5rem;
      padding: 0.5rem;
    }

    .carta-image-container {
      min-height: 250px;
    }

    .carta-image {
      max-height: 320px;
    }
  }

  @media (max-width: 480px) {
    .cartas-grid-custom {
      grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
      gap: 1rem;
    }

    .carta-image-container {
      min-height: 220px;
    }

    .carta-image {
      max-height: 280px;
    }

    .carta-info {
      padding: 0.75rem;
    }

    .carta-nombre {
      font-size: 1rem;
    }
  }

  /* Para pantallas muy pequeñas - una sola columna */
  @media (max-width: 320px) {
    .cartas-grid-custom {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .carta-link {
      max-width: 100%;
    }
  }
</style>