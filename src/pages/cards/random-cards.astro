---
// src/pages/random-cards.astro
import { db } from '../../lib/firebase';
import { collection, getDocs } from 'firebase/firestore';
import Layout from '../../layouts/Layout.astro';
import '../../styles/cards.css';

interface Card {
  id: string;
  nombre: string;
  numero: number;
  imagem: string;
  imageLoaded?: boolean;
  imageError?: string;
}

const querySnapshot = await getDocs(collection(db, 'cards'));
const allCards = querySnapshot.docs.map(doc => {
  const data = doc.data();
  return {
    id: doc.id,
    nombre: data.nombre || 'Sin nombre',
    numero: data.numero || 0,
    imagem: data.imagem || '/images/placeholder-card.jpg',
    imageLoaded: false
  };
});

console.log(`Cargadas ${allCards.length} cartas desde Firestore`);

const pageTitle = "Cartas Aleatorias - Tarot de Marsella";
const pageDescription = "Genera una tirada aleatoria de cartas del Tarot de Marsella";
---

<Layout title={pageTitle} description={pageDescription}>
  <main class="container mx-auto px-4 py-8 max-w-7xl">
    <header class="text-center mb-12">
      <h1 class="text-4xl font-bold text-purple-900 mb-4">Tirada de Cartas Aleatorias</h1>
      <p class="text-xl text-purple-700">Selecciona cuántas cartas quieres ver (máximo 13)</p>
    </header>

    <section class="bg-white rounded-xl shadow-md p-6 mb-12 max-w-2xl mx-auto">
      <div class="flex flex-col sm:flex-row gap-4 items-center justify-center">
        <div class="flex-1 w-full sm:w-auto">
          <label for="cardCount" class="block text-sm font-medium text-gray-700 mb-1">
            Número de cartas:
          </label>
          <input
            type="number"
            id="cardCount"
            name="cardCount"
            min="1"
            max="13"
            value="3"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
          />
        </div>
        <button
          type="button"
          id="generateBtn"
          class="mt-2 sm:mt-6 px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg transition-colors"
        >
          Generar Cartas
        </button>
      </div>
    </section>

    <section id="debugStatus" class="bg-yellow-50 border border-yellow-200 rounded-xl p-4 mb-8 max-w-2xl mx-auto hidden">
      <h3 class="font-medium text-yellow-800 mb-2">Estado de carga de imágenes:</h3>
      <div id="debugInfo" class="text-sm text-yellow-700"></div>
    </section>

    <section id="cardsContainer" class="cartas-grid-random">
      <div id="initialMessage" class="col-span-full text-center py-12">
        <p class="text-xl text-gray-500">Presiona el botón "Generar Cartas" para comenzar</p>
      </div>
    </section>
    
    <div id="loadingIndicator" class="hidden text-center py-6">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-600"></div>
      <p class="mt-2 text-purple-700">Cargando cartas...</p>
    </div>
  </main>
</Layout>

<script define:vars={{ allCards }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Configuración esencial
    //   const DEFAULT_CARD_IMAGE = 'https://placehold.co/300x500/webp?text=Tarot+Card'; // Imagen externa de respaldo
    const DEFAULT_CARD_IMAGE = 'https://res.cloudinary.com/die8wz4ag/image/upload/v1747796437/a22_mbkkkq.jpg'; // Imagen externa de respaldo
    const CLOUDINARY_BASE = 'https://res.cloudinary.com/die8wz4ag/image/upload';
    
    // URLs absolutas para las cartas problemáticas
    const SPECIAL_CARDS = {
      'El Loco': `${CLOUDINARY_BASE}/w_300,f_auto,q_auto/v1747796437/a22_mbkkkq.jpg`,
      'El Mago': `${CLOUDINARY_BASE}/w_300,f_auto,q_auto/v1747796434/a01_rxlbr2.jpg`
    };

    // Elementos del DOM
    const elements = {
      generateBtn: document.getElementById('generateBtn'),
      cardCountInput: document.getElementById('cardCount'),
      cardsContainer: document.getElementById('cardsContainer'),
      initialMessage: document.getElementById('initialMessage'),
      loadingIndicator: document.getElementById('loadingIndicator'),
      debugStatus: document.getElementById('debugStatus'),
      debugInfo: document.getElementById('debugInfo')
    };

    // Estado de la aplicación
    let workingCards = JSON.parse(JSON.stringify(allCards));
    let fallbackUsed = false;

    // Función para garantizar una URL de imagen válida
    function ensureValidImageUrl(url, cardName) {
      // 1. Verificar si es una carta especial
      if (SPECIAL_CARDS[cardName]) {
        return SPECIAL_CARDS[cardName];
      }
      
      // 2. Procesar URL según su tipo
      if (!url || typeof url !== 'string') return DEFAULT_CARD_IMAGE;
      
      const cleanedUrl = url.trim();
      
      // URLs absolutas
      if (cleanedUrl.startsWith('http')) {
        return cleanedUrl;
      }
      
      // URLs relativas (asegurar que empiezan con /)
      if (cleanedUrl.startsWith('/')) {
        return cleanedUrl;
      }
      
      return DEFAULT_CARD_IMAGE;
    }

    // Precargar imágenes con manejo robusto de errores
    async function preloadImages() {
      return new Promise(resolve => {
        let loadedCount = 0;
        const totalCards = workingCards.length;
        
        workingCards.forEach((card, index) => {
          const imgUrl = ensureValidImageUrl(card.imagem, card.nombre);
          workingCards[index].imagem = imgUrl;
          
          // Solo precargamos las especiales para no sobrecargar
          if (SPECIAL_CARDS[card.nombre]) {
            const img = new Image();
            img.crossOrigin = 'anonymous';
            
            img.onload = () => {
              workingCards[index].imageLoaded = true;
              loadedCount++;
              if (loadedCount === totalCards) resolve();
            };
            
            img.onerror = () => {
              workingCards[index].imageLoaded = false;
              workingCards[index].imageError = `Error precargando: ${imgUrl}`;
              workingCards[index].imagem = DEFAULT_CARD_IMAGE;
              loadedCount++;
              if (loadedCount === totalCards) resolve();
            };
            
            img.src = imgUrl;
          } else {
            // Para otras cartas, asumimos que están bien
            workingCards[index].imageLoaded = true;
            loadedCount++;
            if (loadedCount === totalCards) resolve();
          }
        });
      });
    }

    // Generar cartas aleatorias
    async function generateRandomCards() {
      try {
        // Validar número de cartas
        const cardCount = Math.min(13, Math.max(1, 
          parseInt(elements.cardCountInput?.value || '3') || 3));
        
        if (elements.cardCountInput) {
          elements.cardCountInput.value = cardCount;
        }

        // Mostrar carga
        if (elements.loadingIndicator) {
          elements.loadingIndicator.classList.remove('hidden');
        }

        // Precargar imágenes
        await preloadImages();

        // Ocultar mensaje inicial
        if (elements.initialMessage) {
          elements.initialMessage.style.display = 'none';
        }

        // Limpiar contenedor
        if (elements.cardsContainer) {
          elements.cardsContainer.innerHTML = '';
        }

        // Seleccionar cartas aleatorias
        const shuffled = [...workingCards].sort(() => 0.5 - Math.random());
        const selectedCards = shuffled.slice(0, cardCount);

        // Mostrar cartas
        selectedCards.forEach(card => {
          const cardElement = document.createElement('div');
          cardElement.className = 'carta-random-item';
          
          const finalImageUrl = card.imageLoaded ? card.imagem : DEFAULT_CARD_IMAGE;
          
          cardElement.innerHTML = `
            <a href="/cards/${card.id}" class="carta-random-link">
              <article class="carta-random-container">
                <div class="carta-random-image-wrapper">
                  <img
                    src="${finalImageUrl}"
                    alt="Carta ${card.nombre}"
                    loading="lazy"
                    class="carta-random-image"
                    onerror="
                      this.onerror=null; 
                      this.src='${DEFAULT_CARD_IMAGE}';
                      this.classList.add('error-image');
                    "
                  />
                </div>
                <div class="carta-random-info">
                  <h3 class="carta-random-nombre">${card.nombre}</h3>
                  <span class="carta-random-numero">(${card.numero})</span>
                </div>
              </article>
            </a>
          `;
          
          if (elements.cardsContainer) {
            elements.cardsContainer.appendChild(cardElement);
          }
        });
      } catch (error) {
        console.error('Error generando cartas:', error);
        if (elements.cardsContainer) {
          elements.cardsContainer.innerHTML = `
            <div class="col-span-full text-center py-12">
              <p class="text-xl text-red-500">Error al mostrar las cartas</p>
              <p class="text-gray-600 mt-2">Por favor intenta nuevamente</p>
            </div>
          `;
        }
      } finally {
        if (elements.loadingIndicator) {
          elements.loadingIndicator.classList.add('hidden');
        }
      }
    }

    // Event Listeners
    if (elements.generateBtn) {
      elements.generateBtn.addEventListener('click', generateRandomCards);
    }

    // Precarga inicial
    setTimeout(() => {
      if (!workingCards.some(card => card.imageLoaded !== undefined)) {
        preloadImages();
      }
    }, 500);
  });
</script>

