---
// src/pages/random-cards.astro
import { db } from '../../lib/firebase';
import { collection, getDocs } from 'firebase/firestore';
import Layout from '../../layouts/Layout.astro';

interface Card {
  id: string;
  nombre: string;
  numero: number;
  imagem: string;
  imageLoaded?: boolean;
  imageError?: string; // Nuevo campo para registrar errores de carga
}

const querySnapshot = await getDocs(collection(db, 'cards'));
const allCards = querySnapshot.docs.map(doc => {
  const data = doc.data();
  return {
    id: doc.id,
    nombre: data.nombre || 'Sin nombre',
    numero: data.numero || 0,
    imagem: data.imagem || '/images/placeholder-card.jpg',
    imageLoaded: false
  };
});

console.log(`Cargadas ${allCards.length} cartas desde Firestore`);

const pageTitle = "Cartas Aleatorias - Tarot de Marsella";
const pageDescription = "Genera una tirada aleatoria de cartas del Tarot de Marsella";
---

<Layout title={pageTitle} description={pageDescription}>
  <main class="container mx-auto px-4 py-8 max-w-7xl">
    <header class="text-center mb-12">
      <h1 class="text-4xl font-bold text-purple-900 mb-4">Tirada de Cartas Aleatorias</h1>
      <p class="text-xl text-purple-700">Selecciona cuántas cartas quieres ver (máximo 13)</p>
    </header>

    <section class="bg-white rounded-xl shadow-md p-6 mb-12 max-w-2xl mx-auto">
      <div class="flex flex-col sm:flex-row gap-4 items-center justify-center">
        <div class="flex-1 w-full sm:w-auto">
          <label for="cardCount" class="block text-sm font-medium text-gray-700 mb-1">
            Número de cartas:
          </label>
          <input
            type="number"
            id="cardCount"
            name="cardCount"
            min="1"
            max="13"
            value="3"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500"
          />
        </div>
        <button
          type="button"
          id="generateBtn"
          class="mt-2 sm:mt-6 px-6 py-3 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg transition-colors"
        >
          Generar Cartas
        </button>
      </div>
    </section>

    <!-- Sección de estado para depuración -->
    <section id="debugStatus" class="bg-yellow-50 border border-yellow-200 rounded-xl p-4 mb-8 max-w-2xl mx-auto hidden">
      <h3 class="font-medium text-yellow-800 mb-2">Estado de carga de imágenes:</h3>
      <div id="debugInfo" class="text-sm text-yellow-700"></div>
    </section>

    <section id="cardsContainer" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 px-4">
      <div id="initialMessage" class="col-span-full text-center py-12">
        <p class="text-xl text-gray-500">Presiona el botón "Generar Cartas" para comenzar</p>
      </div>
    </section>
    
    <div id="loadingIndicator" class="hidden text-center py-6">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-600"></div>
      <p class="mt-2 text-purple-700">Cargando cartas...</p>
    </div>
  </main>
</Layout>

<script define:vars={{ allCards }}>
  // Asegurarnos de que el DOM está completamente cargado
  document.addEventListener('DOMContentLoaded', () => {
    // Elementos del DOM
    const generateBtn = document.getElementById('generateBtn');
    const cardCountInput = document.getElementById('cardCount');
    const cardsContainer = document.getElementById('cardsContainer');
    const initialMessage = document.getElementById('initialMessage');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const debugStatus = document.getElementById('debugStatus');
    const debugInfo = document.getElementById('debugInfo');
    
    // Crear una copia profunda de las cartas para trabajar
    let workingCards = JSON.parse(JSON.stringify(allCards));
    
    // Función para mostrar información de depuración
    function showDebugInfo(show = true) {
      if (!debugStatus || !debugInfo) return;
      
      if (show) {
        debugStatus.classList.remove('hidden');
        
        // Contar cartas válidas e inválidas
        const validCount = workingCards.filter(c => c.imageLoaded === true).length;
        const invalidCount = workingCards.filter(c => c.imageLoaded === false).length;
        const totalCount = workingCards.length;
        
        let infoHtml = `
          <p>Total de cartas: ${totalCount}</p>
          <p>Cartas con imágenes válidas: ${validCount}</p>
          <p>Cartas con imágenes inválidas: ${invalidCount}</p>
        `;
        
        // Mostrar los primeros 5 ejemplos de errores si hay alguno
        const cardsWithErrors = workingCards.filter(c => c.imageError);
        if (cardsWithErrors.length > 0) {
          infoHtml += '<p class="mt-2 font-medium">Ejemplos de errores:</p><ul class="list-disc pl-5">';
          cardsWithErrors.slice(0, 5).forEach(card => {
            infoHtml += `<li>${card.nombre} (${card.id}): ${card.imagem} - ${card.imageError}</li>`;
          });
          infoHtml += '</ul>';
        }
        
        // Mostrar ejemplos de URLs de imágenes
        infoHtml += '<p class="mt-2 font-medium">Ejemplos de URLs de imágenes:</p><ul class="list-disc pl-5">';
        workingCards.slice(0, 5).forEach(card => {
          infoHtml += `<li>${card.nombre}: ${card.imagem}</li>`;
        });
        infoHtml += '</ul>';
        
        debugInfo.innerHTML = infoHtml;
      } else {
        debugStatus.classList.add('hidden');
      }
    }
    
    // Función para procesar URLs de imágenes (idéntica a la de index.astro)
    function processImageUrl(url) {
      // 1. Verificación básica
      if (!url || typeof url !== 'string') return '/placeholder-card.jpg';
      
      // 2. Limpieza de URL (elimina espacios en blanco)
      const cleanedUrl = url.trim();
      
      // 3. Manejo de Firebase Storage
      if (cleanedUrl.startsWith('https://firebasestorage.googleapis.com')) {
        // Asegura el parámetro alt=media
        return cleanedUrl.includes('alt=media') 
          ? cleanedUrl 
          : `${cleanedUrl}${cleanedUrl.includes('?') ? '&' : '?'}alt=media`;
      }
      
      // 4. Manejo de Cloudinary (si aplica)
      if (cleanedUrl.includes('res.cloudinary.com') && !cleanedUrl.includes('upload/w_')) {
        return cleanedUrl.replace('upload/', 'upload/w_300,f_auto,q_auto/');
      }
      
      return cleanedUrl;
    }
    
    // Función para validar si una URL es correcta
    function isValidImageUrl(url) {
      // Si es una URL relativa que comienza con "/", asumir que es válida
      if (url && url.startsWith('/')) {
        return true;
      }
      
      // Intentar crear una URL válida
      try {
        new URL(url);
        return true;
      } catch (e) {
        return false;
      }
    }
    
    // Precargar todas las imágenes para saber cuáles son válidas
    function preloadImages() {
      return new Promise(resolve => {
        let loadedCount = 0;
        const totalCards = workingCards.length;
        
        console.log(`Iniciando precarga de ${totalCards} imágenes...`);
        
        // Si no hay cartas para precargar, resolvemos inmediatamente
        if (totalCards === 0) {
          console.warn('No hay cartas para precargar');
          resolve();
          return;
        }
        
        workingCards.forEach((card, index) => {
          // Validar primero si la URL parece correcta
          if (!card.imagem || !isValidImageUrl(card.imagem)) {
            workingCards[index].imageLoaded = false;
            workingCards[index].imageError = 'URL inválida';
            loadedCount++;
            console.error(`URL inválida (${loadedCount}/${totalCards}): ${card.imagem}`);
            
            if (loadedCount === totalCards) {
              console.log(`Precarga completada. ${workingCards.filter(c => c.imageLoaded).length} imágenes válidas.`);
              resolve();
            }
            return;
          }
          
          const img = new Image();
          
          img.onload = () => {
            workingCards[index].imageLoaded = true;
            loadedCount++;
            console.log(`Imagen cargada (${loadedCount}/${totalCards}): ${card.imagem}`);
            
            if (loadedCount === totalCards) {
              console.log(`Precarga completada. ${workingCards.filter(c => c.imageLoaded).length} imágenes válidas.`);
              resolve();
            }
          };
          
          img.onerror = (e) => {
            workingCards[index].imageLoaded = false;
            workingCards[index].imageError = 'Error al cargar la imagen';
            loadedCount++;
            console.error(`Error al cargar imagen (${loadedCount}/${totalCards}): ${card.imagem}`, e);
            
            if (loadedCount === totalCards) {
              console.log(`Precarga completada. ${workingCards.filter(c => c.imageLoaded).length} imágenes válidas.`);
              resolve();
            }
          };
          
          // Usar la URL directamente si es absoluta o agregarle el origen si es relativa
          if (card.imagem.startsWith('/')) {
            img.src = window.location.origin + card.imagem;
            console.log(`Cargando imagen relativa: ${img.src}`);
          } else {
            img.src = card.imagem;
            console.log(`Cargando imagen absoluta: ${img.src}`);
          }
        });
        
        // Resolución de seguridad después de 8 segundos
        setTimeout(() => {
          if (loadedCount < totalCards) {
            console.warn(`Tiempo de carga excedido, continuando con ${loadedCount}/${totalCards} cartas verificadas`);
            resolve();
          }
        }, 8000);
      });
    }
    
    // Función para mostrar cartas aleatorias con imágenes válidas
    async function generateRandomCards() {
      if (!cardsContainer) return;
      
      // Obtener y validar el número de cartas
      let cardCount = parseInt(cardCountInput?.value || '3');
      cardCount = Math.min(13, Math.max(1, isNaN(cardCount) ? 3 : cardCount));
      if (cardCountInput) cardCountInput.value = cardCount.toString();
      
      // Mostrar indicador de carga
      if (loadingIndicator) loadingIndicator.classList.remove('hidden');
      
      // Asegurarnos de que las imágenes están precargadas
      if (!workingCards.some(card => card.imageLoaded !== undefined)) {
        console.log('Iniciando precarga de imágenes...');
        
        // Procesamos las URLs antes de precargar
        workingCards = workingCards.map(card => ({
          ...card,
          imagem: processImageUrl(card.imagem)
        }));
        
        await preloadImages();
        // Mostrar información de depuración
        showDebugInfo(true);
      }
      
      // Si todas las imágenes fallan, intentar con todas las cartas sin validación
      let validCards = workingCards.filter(card => card.imageLoaded === true);
      
      if (validCards.length === 0) {
        console.warn('No se encontraron imágenes válidas. Intentando mostrar todas las cartas sin validación.');
        validCards = workingCards.map(card => ({ ...card, imageLoaded: true }));
      }
      
      // Verificar si hay suficientes cartas válidas
      if (validCards.length < cardCount) {
        alert(`Solo hay ${validCards.length} cartas con imágenes válidas disponibles.`);
        cardCount = validCards.length;
      }
      
      // Si no hay cartas válidas, mostrar mensaje
      if (validCards.length === 0) {
        cardsContainer.innerHTML = `
          <div class="col-span-full text-center py-12">
            <p class="text-xl text-red-500">No hay cartas con imágenes disponibles</p>
            <p class="mt-4 text-gray-600">Verifica que las imágenes están correctamente configuradas en la base de datos.</p>
          </div>
        `;
        if (loadingIndicator) loadingIndicator.classList.add('hidden');
        return;
      }
      
      // Limpiar contenedor y ocultar mensaje inicial
      cardsContainer.innerHTML = '';
      if (initialMessage) initialMessage.style.display = 'none';
      
      // Mezclar array y tomar las primeras N cartas
      const shuffled = [...validCards].sort(() => 0.5 - Math.random());
      const selectedCards = shuffled.slice(0, cardCount);
      
      // Mostrar cartas seleccionadas
      selectedCards.forEach(card => {
        const cardElement = document.createElement('div');
        cardElement.className = 'flex flex-col';
        
        // Determinar la URL correcta de la imagen
        let imageUrl = card.imagem;
        if (imageUrl.startsWith('/') && !imageUrl.startsWith('//')) {
          // Es una ruta relativa, añadir el origen
          imageUrl = window.location.origin + imageUrl;
        }
        
        cardElement.innerHTML = `
          <a href="/cards/${card.id}" class="block transition-transform duration-300 hover:-translate-y-2 hover:shadow-lg">
            <figure class="flex flex-col h-full">
              <img
                src="${imageUrl}"
                alt="Carta ${card.nombre}"
                width="200"
                height="300"
                loading="lazy"
                class="rounded-lg shadow-md w-full aspect-[2/3] object-cover bg-gray-100"
                onerror="this.onerror=null; this.src='/placeholder-card.jpg'; this.classList.add('bg-gray-100')"
              />
              <figcaption class="mt-3 text-center font-medium text-gray-800">
                ${card.nombre} <span class="text-gray-500">(${card.numero})</span>
              </figcaption>
            </figure>
          </a>
        `;
        
        cardsContainer.appendChild(cardElement);
      });
      
      // Ocultar indicador de carga
      if (loadingIndicator) loadingIndicator.classList.add('hidden');
    }
    
    // Mostrar botón para depuración
    const debugButton = document.createElement('button');
    debugButton.textContent = 'Mostrar información de depuración';
    debugButton.className = 'mt-4 px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white font-medium rounded-lg transition-colors text-xs';
    debugButton.addEventListener('click', () => {
      showDebugInfo(true);
    });
    
    // Asociar evento al botón principal
    generateBtn?.addEventListener('click', generateRandomCards);
    
    // Agregar botón de depuración después del botón principal
    generateBtn?.parentNode?.appendChild(debugButton);
  });
</script>

<style>
  .bg-gray-100 {
    background-color: #f3f4f6;
  }
  
  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  input[type="number"] {
    -moz-appearance: textfield;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>